{"version":3,"sources":["components/robots.js","components/searchbox.js","components/card.js","components/cardList.js","App.js","serviceWorker.js","index.js"],"names":["robots","_id","name","SearchBox","props","className","onChange","placeholder","Cards","src","id","alt","CardList","object","map","user","key","toString","App","onSearchChange","event","setState","searchField","target","value","state","filterRobot","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAAaA,G,YAAS,CACpB,CAAEC,IAAK,EAAGC,KAAM,WAChB,CAAED,IAAK,EAAGC,KAAM,eAChB,CAAED,IAAK,EAAGC,KAAM,QAChB,CAAED,IAAK,EAAGC,KAAM,QAChB,CAAED,IAAK,EAAGC,KAAM,SAChB,CAAED,IAAK,EAAGC,KAAM,OAChB,CAAED,IAAK,EAAGC,KAAM,cAChB,CAAED,IAAK,EAAGC,KAAM,YAChB,CAAED,IAAK,EAAGC,KAAM,OAChB,CAAED,IAAK,EAAGC,KAAM,OAChB,CAAED,IAAK,GAAIC,KAAM,SACjB,CAAED,IAAK,GAAIC,KAAM,SACjB,CAAED,IAAK,GAAIC,KAAM,YCCJC,EAZG,SAAAC,GAChB,OACE,6BACE,2BACEC,UAAU,KACVC,SAAUF,EAAME,SAChBC,YAAY,qBCGLC,EATD,SAAAJ,GACZ,OACE,yBAAKC,UAAU,uCACb,yBAAKI,IAAG,+BAA0BL,EAAMM,GAAhC,KAAuCC,IAAI,KACnD,gDAAeP,EAAMF,KAArB,SCGSU,EANE,SAAAR,GACf,OAAOA,EAAMS,OAAOC,KAAI,SAAAC,GACtB,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EAAKd,IAAKS,GAAIK,EAAKd,IAAIgB,SAAS,IAAKf,KAAMa,EAAKb,WCqCxDgB,E,YAlCb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1C,EAAKC,MAAQ,CACXzB,OAAQA,EACRsB,YAAa,IAJH,E,sEAYJ,IAAD,OACDI,EAAcC,KAAKF,MAAMzB,OAAO4B,QAAO,SAAAC,GAC3C,OAAOA,EAAM3B,KACV4B,cACAC,SAAS,EAAKN,MAAMH,YAAYQ,kBAErC,OACE,yBAAKzB,UAAU,OACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CACEiB,YAAaK,KAAKL,YAClBhB,SAAUqB,KAAKR,iBAEjB,8BACG,IACD,kBAAC,EAAD,CAAUN,OAAQa,U,GA5BVM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1c62f24c.chunk.js","sourcesContent":["export const robots = [\n  { _id: 0, name: \"di duke\" },\n  { _id: 1, name: \"berry ngong\" },\n  { _id: 2, name: \"tuti\" },\n  { _id: 3, name: \"bivu\" },\n  { _id: 4, name: \"sugar\" },\n  { _id: 5, name: \"nem\" },\n  { _id: 6, name: \"baby ngong\" },\n  { _id: 7, name: \"chau bui\" },\n  { _id: 8, name: \"teu\" },\n  { _id: 9, name: \"mus\" },\n  { _id: 10, name: \"bella\" },\n  { _id: 11, name: \"vu vu\" },\n  { _id: 12, name: \"ma han\" }\n];\n","import React, { Component } from \"react\";\r\n\r\nconst SearchBox = props => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"f3\"\r\n        onChange={props.onChange}\r\n        placeholder=\"search friends\"\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Cards = props => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow\">\r\n      <img src={`https://robohash.org/${props.id} `} alt=\"\" />\r\n      <h1> {`Hello ${props.name} !`}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { Component } from \"react\";\r\nimport Cards from \"./card\";\r\n\r\nconst CardList = props => {\r\n  return props.object.map(user => {\r\n    return <Cards key={user._id} id={user._id.toString(10)} name={user.name} />;\r\n  });\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"tachyons\";\r\nimport { robots } from \"./components/robots\";\r\nimport SearchBox from \"./components/searchbox\";\r\nimport CardList from \"./components/cardList\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: robots,\r\n      searchField: \"\"\r\n    };\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filterRobot = this.state.robots.filter(robot => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchField.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"f1\">Robo Friends</h1>\r\n        <SearchBox\r\n          searchField={this.searchField}\r\n          onChange={this.onSearchChange}\r\n        ></SearchBox>\r\n        <main>\r\n          {\" \"}\r\n          <CardList object={filterRobot}></CardList>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}